#!/bin/bash

# Created by argbash-init v2.1.1
# ARG_POSITIONAL_SINGLE([stem],[Input filename stem (use % that is substituted by 01 02)],[])
# ARG_POSITIONAL_SINGLE([outname],[Output filename],[])
# ARG_OPTIONAL_SINGLE([offset],[],[<offset's help message goes here>],["0,0"])
# ARG_OPTIONAL_SINGLE([start],[s],[Starting index],[1])
# ARG_HELP([The composer of distortions])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.1.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, know your rights: https://github.com/matejak/argbash

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}
# validators

# THE DEFAULTS INITIALIZATION - POSITIONALS
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_offset="0,0"
_arg_start="1"

# THE PRINT HELP FUNCION
print_help ()
{
	echo "The composer of distortions"
	printf 'Usage: %s [--offset <arg>] [-s|--start <arg>] [-h|--help] <stem> <outname>\n' "$0"
	printf "\t<stem>: Input filename stem (use % that is substituted by 01 02)\n"
	printf "\t<outname>: Output filename\n"
	printf "\t--offset: <offset's help message goes here> (default: '%s')\n" "0,0"
	printf "\t-s,--start: Starting index (default: '%s')\n" "1"
	printf "\t-h,--help: Prints help\n"
}

# THE PARSING ITSELF
while test $# -gt 0
do
	_key="$1"
	case "$_key" in
		--offset|--offset=*)
			_val="${_key##--offset=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_offset="$_val"
			;;
		-s|--start|--start=*)
			_val="${_key##--start=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_start="$_val"
			;;
		-h|--help)
			print_help
			exit 0
			;;
		*)
			_positionals+=("$1")
			;;
	esac
	shift
done

_positional_names=('_arg_stem' '_arg_outname' )
test ${#_positionals[@]} -lt 2 && _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2, but got only ${#_positionals[@]}." 1
test ${#_positionals[@]} -gt 2 && _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2, but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
for (( ii = 0; ii < ${#_positionals[@]}; ii++))
do
	eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
done

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# $1: the index
fname()
{
	echo "$_arg_stem" | sed -e "s/%/$(printf "%02d" "$(($1 + _arg_start))")/"
}

add_offset()
{
	local _xoff=$((198 + $(echo "$_arg_offset" | cut -f 1 -d ,)))
	local _yoff=$((-208 + $(echo "$_arg_offset" | cut -f 2 -d ,)))
	printf "%+d%+d" "$_xoff" "$_yoff"
}


convert  -page $(add_offset) $(fname 1) -compose add -page +0+0 $(fname 0) -background black -layers merge  +repage "$_arg_outname"

# ] <-- needed because of Argbash
